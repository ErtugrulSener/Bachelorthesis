"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base64url_1 = __importDefault(require("base64url"));
const generateChallenge_1 = __importDefault(require("../helpers/generateChallenge"));
/**
 * Prepare a value to pass into navigator.credentials.get(...) for authenticator "login"
 *
 * @param allowedCredentialIDs Array of base64url-encoded authenticator IDs registered by the
 * @param challenge Random value the authenticator needs to sign and pass back
 * user for assertion
 * @param timeout How long (in ms) the user can take to complete assertion
 * @param suggestedTransports Suggested types of authenticators for assertion
 * @param userVerification Set to `'discouraged'` when asserting as part of a 2FA flow, otherwise
 * set to `'preferred'` or `'required'` as desired.
 * @param extensions Additional plugins the authenticator or browser should use during assertion
 */
function generateAssertionOptions(options) {
    const { allowedCredentialIDs, challenge = generateChallenge_1.default(), suggestedTransports = ['usb', 'ble', 'nfc', 'internal'], timeout = 60000, userVerification, extensions, } = options;
    return {
        challenge: base64url_1.default.encode(challenge),
        allowCredentials: allowedCredentialIDs.map(id => ({
            id,
            type: 'public-key',
            transports: suggestedTransports,
        })),
        timeout,
        userVerification,
        extensions,
    };
}
exports.default = generateAssertionOptions;
//# sourceMappingURL=generateAssertionOptions.js.map